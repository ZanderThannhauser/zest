
%skip: ' ' | '\t' | '\n' | "//" [!'\n']* '\n';

`string`: '\"' ([!('\\', '\"')] | '\\' ['\"', 'n', 't', '\\'])* '\"';

`integer`: ['0' - '9']+;

file: `string` #path ":" expression ';';

primary_expression
	: '(' expression #sub ')'
	| `string` #string
	| `integer` #integer
	;

simple_command: (primary_expression #args[])+;

complex_command:
	simple_command #subcommands[]
	('<' primary_expression #redirect_in)?
	('|' simple_command #subcommands[])*
	('>' primary_expression #redirect_out)?
	;

prefix_expression
	: primary_expression #inner
	| "file" "(" expression #file ")"
	| "shell" "(" complex_command #shell ")"
	;

multiplicative_expression
	: prefix_expression #inner
	| multiplicative_expression #left '*' prefix_expression #right
	| multiplicative_expression #left '/' prefix_expression #right
	;

additive_expression
	: multiplicative_expression #inner
	| additive_expression #left '+' multiplicative_expression #right
	| additive_expression #left '-' multiplicative_expression #right
	;

equality_expression
	: additive_expression #inner
	| equality_expression #left "==" additive_expression #right
	| equality_expression #left "!=" additive_expression #right
	;

ternary_expression
	: equality_expression #inner
	| equality_expression #inner '?' expression #truecase ':' ternary_expression #falsecase
	;

expression: ternary_expression #inner;

assertion: expression #conditional ';';

test: (file #files[] | assertion #assertions[])*;

%start: test #tests[] ("---" test #tests[])*;

















