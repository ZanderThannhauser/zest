
%skip: ' ' | '\t' | '\n' | "//" [!'\n']* '\n';

`string`: '\"' ([!('\\', '\"')] | '\\' ['\"', 'n', 't', '\\'])* '\"';

`integer`: ['0' - '9']+;

`chmod`: ['u', 'g', 'o', 'a']*
	(['-','+','='] (['r', 'w', 'x', 'X', 's', 't']+ | ['u', 'g', 'o']))+;

`octal`: ['0'-'7'] ['0'-'7'] ['0'-'7'];

file:
	`string` #path
	('(' (`chmod` #chmods[] (',' `chmod` #chmods[])* | `octal` #octal) ')')?
	":" expression #expression ';';

primary_expression
	: '(' expression #sub ')'
	| `string` #string
	| `integer` #integer
	;

simple_command: (primary_expression #args[])+;

complex_command:
	simple_command #subcommands[]
	('<' primary_expression #redirect_in)?
	('|' simple_command #subcommands[])*
	('>' primary_expression #redirect_out)?
	;

prefix_expression
	: primary_expression #inner
	| "file" "(" expression #file ")"
	| "shell" "(" complex_command #shell ")"
	| "!" prefix_expression #sub
	| "+" prefix_expression #sub
	| "-" prefix_expression #sub
	| "~" prefix_expression #sub
	;

multiplicative_expression
	: prefix_expression #inner
	| multiplicative_expression #left '*' prefix_expression #right
	| multiplicative_expression #left '/' prefix_expression #right
	| multiplicative_expression #left '%' prefix_expression #right
	;

additive_expression
	: multiplicative_expression #inner
	| additive_expression #left '+' multiplicative_expression #right
	| additive_expression #left '-' multiplicative_expression #right
	;

shift_expression
	: additive_expression #inner
	| shift_expression #left "<<" additive_expression #right
	| shift_expression #left ">>" additive_expression #right
	;

relational_expression
	: shift_expression #inner
	| relational_expression #left '<'  shift_expression #right
	| relational_expression #left '>'  shift_expression #right
	| relational_expression #left "<=" shift_expression #right
	| relational_expression #left ">=" shift_expression #right
	;

equality_expression
	: relational_expression #inner
	| equality_expression #left "==" relational_expression #right
	| equality_expression #left "!=" relational_expression #right
	;

and_expression
	: equality_expression #inner
	| and_expression #left '&' equality_expression #right
	;

exclusive_or_expression
	: and_expression #inner
	| exclusive_or_expression #left '^' and_expression #right
	;

inclusive_or_expression
	: exclusive_or_expression #inner
	| inclusive_or_expression #left '|' exclusive_or_expression #right
	;

logical_and_expression
	: inclusive_or_expression #inner
	| logical_and_expression #left "&&" inclusive_or_expression #right
	;

logical_or_expression
	: logical_and_expression #inner
	| logical_or_expression #left "||" logical_and_expression #right
	;

conditional_expression
	: logical_or_expression #inner
	| logical_or_expression #conditional '?' expression #truecase ':' conditional_expression #falsecase
	;

expression: conditional_expression #inner;

assertion: expression #conditional ';';

test: (file #files[] | assertion #assertions[])*;

root: test #tests[] ("---" test #tests[])*;

%start: root #root;

















